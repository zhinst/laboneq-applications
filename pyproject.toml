[build-system]
requires = [ "setuptools>=65.0.0", "wheel",]
build-backend = "setuptools.build_meta"

[project]
name = "laboneq_applications"
description = "Library of LabOne Q experiments, analysis functions, and more."
version = "0.2.0dev0"
license = {text = "Apache 2.0"}
requires-python = ">=3.9"
authors = [
    { name = "Zurich Instruments Development Team", email = "info@zhinst.com" },
]
keywords = [
    "quantum",
    "sdk",
    "zhinst",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    "typing_extensions",
    "laboneq",
    "numpy~=1.26.3",  # TODO: Validate for Numpy 2.0
    "scipy",
    "matplotlib",
    "lmfit",
    "pydantic>=2.0",
    "eval_type_backport", # Required for using Union type in pydantic with python 3.9
]

[tool.setuptools.packages.find]
where = ["src"]
include = ["laboneq_applications*"]
namespaces = false

[tool.setuptools]
zip-safe = false

[tool.pytest.ini_options]
testpaths = [
    "tests",
]

[tool.ruff]
include = [
    "pyproject.toml",
    "src/**/*.py",
    "tests/**/*.py",
    "ci/**/*.py",
]
target-version = "py39"
exclude = [
  "docs/zi_mkdocs",
]

lint.select = ["ALL"]
lint.ignore = [
  # Type annotation for self
  "ANN101",
  # Missing trailing comma (interferes with ruff format)
  "COM812",
  # Implicitly concatenate strings on same line (interferes with ruff format)
  "ISC001",
  # Missing docstring in `__init__`
  "D107",
  # Missing type annotation for `cls` in classmethod
  "ANN102",
  # Missing docstring in magic method
  "D105",
  # Missing type annotation for `*args`
  "ANN002",
  # Missing type annotation for `**kwargs`
  "ANN003",
  # Too many return statements
  "PLR0911",
  # Missing return type annotation for special method
  "ANN204",
  # Line contains TODO, consider resolving the issue
  "FIX",
  # TODO comments
  "TD",
  # Unused function arguments (function signatures are sometimes a fixed API)
  "ARG001",
  # Multiple with statements (in the LabOneQ DSL, with statements specify
  # program structure)
  "SIM117",
  # Static join to f-string (f-strings don't provide a nice way to write
  # multiline strings)
  "FLY002",
  # Strings in exception class instantiation
  "EM101", "EM102", "TRY003",
  # Private class member access (rule raises false positives)
  "SLF001",
  # Pandas .values (rule raises false positivies even when pandas is not used)
  "PD011",
  # Use of built-in open (pathlib is not more readable in this case)
  "PTH123",
  # Use of return inside try (there is no consistent rule that fits all uses here)
  "TRY300",
]

[tool.ruff.lint.per-file-ignores]
# Testing checks
"tests/*" = [
  # Magic values
  "PLR2004",
  # Assertions
  "S101",
  # Annotations
  "ANN",
  # Docstrings
  "D",
  # Pytest raises Exception
  "PT011",
  # part of an implicit namespace package
  "INP001"
]
# CI tool checks
"ci/*" = [
  # part of an implicit namespace package
  "INP001",
]
# Example notebook checks (nbqa converts notebooks to .py)
"examples/**/*.py" = [
  # Annotations
  "ANN",
  # Missing __init__.py (notebooks don't have packages)
  "INP001",
  # Allow undocumented modules
  "D100",
  # Allow undocumented classes
  "D101",
  # Allow undocumented functions
  "D103",
  # Allow module-level imports that aren't at the top of the file
  "E402",
  # Allow commented out code which is often useful for explaining
  "ERA001",
  # Allow star imports
  "F403",
  # Allow undefined names because star imports are allowed
  "F405",
  # Allow redefining values
  "F811",
  # Pointless comparisons can display values in notebooks
  "B015",
  # Useless attribute access can display values in notebooks
  "B018",
  # Allow boolean positional parameters with defaults.
  "FBT002",
  # Magic values are sometimes fine in examples
  "PLR2004",
  # Print statements can be useful in notebooks
  "T201",
]
# Documentation notebooks (nbqa converts notebooks to .py)
"docs/sources/**/*.py" = [
  # Annotations
  "ANN",
  # Missing __init__.py (notebooks don't have packages)
  "INP001",
  # Allow undocumented modules
  "D100",
  # Allow undocumented classes
  "D101",
  # Allow undocumented functions
  "D103",
  # Allow module-level imports that aren't at the top of the file
  "E402",
  # Allow commented out code which is often useful for explaining
  "ERA001",
  # Allow star imports
  "F403",
  # Allow undefined names because star imports are allowed
  "F405",
  # Allow redefining values
  "F811",
  # Pointless comparisons can display values in notebooks
  "B015",
  # Useless attribute access can display values in notebooks
  "B018",
  # Allow boolean positional parameters with defaults.
  "FBT002",
  # Magic values are sometimes fine in examples
  "PLR2004",
  # Print statements can be useful in notebooks
  "T201",
]

[tool.ruff.lint.isort]
known-first-party = ["laboneq_applications"]
forced-separate = ["tests"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 10

[tool.black]
target-version = ["py39"]
