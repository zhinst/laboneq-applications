# Copyright 2024 Zurich Instruments AG
# SPDX-License-Identifier: Apache-2.0

"""Tests for the resonator spectroscopy analysis using the testing utilities."""

import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import pytest
from laboneq.workflow import handles
from laboneq.workflow.tasks.run_experiment import (
    AcquiredResult,
    RunExperimentResults,
)

from laboneq_applications.analysis import qubit_spectroscopy


@pytest.fixture
def results_single_qubit():
    """Results from a qubit-spectroscopy experiment.

    In the AcquiredResults below, the axis corresponds to the qubit ge frequency, and
    the data is the magnitude of the acquired complex signal, which has a double-dipped
    Lorentzian line-shape. The analysis fits the larger (deeper and wider) Lorentzian
    dip.
    """
    data = {}
    data[handles.result_handle("q0")] = AcquiredResult(
        data=np.array(
            [
                -0.58256794 - 1.87263017j,
                -0.58251117 - 1.88365866j,
                -0.58717625 - 1.88647852j,
                -0.58398021 - 1.88677552j,
                -0.58397177 - 1.88173947j,
                -0.58356964 - 1.89018048j,
                -0.58378955 - 1.89094581j,
                -0.58644525 - 1.89187281j,
                -0.58298912 - 1.89507419j,
                -0.58698233 - 1.88852165j,
                -0.58531156 - 1.88870218j,
                -0.58508512 - 1.89507677j,
                -0.58735855 - 1.89418632j,
                -0.58906728 - 1.89482959j,
                -0.58720054 - 1.89462085j,
                -0.58296914 - 1.89562776j,
                -0.58835419 - 1.88703841j,
                -0.58685348 - 1.88912531j,
                -0.58333955 - 1.8941652j,
                -0.58607189 - 1.89071938j,
                -0.58290317 - 1.8895051j,
                -0.5847982 - 1.89084938j,
                -0.5841524 - 1.89050474j,
                -0.58803179 - 1.88890536j,
                -0.58703823 - 1.8924763j,
                -0.58955076 - 1.89062429j,
                -0.58389842 - 1.8895028j,
                -0.58426476 - 1.89536401j,
                -0.58821072 - 1.89667571j,
                -0.58396167 - 1.88926735j,
                -0.58385154 - 1.88969113j,
                -0.58395775 - 1.88961344j,
                -0.44070889 - 1.46865876j,
                -0.50933912 - 1.54931302j,
                -0.54086827 - 1.65364519j,
                -0.55952819 - 1.72913256j,
                -0.57240254 - 1.77791822j,
                -0.57519014 - 1.82199881j,
                -0.58383649 - 1.85156223j,
                -0.58396963 - 1.86353178j,
                -0.57915387 - 1.86883078j,
                -0.58460825 - 1.88273708j,
                -0.58521708 - 1.88569998j,
                -0.5869252 - 1.88709821j,
                -0.58618639 - 1.88731105j,
                -0.58087932 - 1.89070037j,
                -0.58700011 - 1.89403759j,
                -0.5847797 - 1.88781717j,
                -0.58052513 - 1.88544989j,
                -0.5875041 - 1.8845093j,
                -0.58070318 - 1.88557093j,
                -0.58102619 - 1.89132647j,
                -0.58044928 - 1.88591519j,
                -0.58037913 - 1.89205192j,
                -0.58704292 - 1.890038j,
                -0.5831061 - 1.89081216j,
                -0.58014585 - 1.88607065j,
                -0.5830375 - 1.88770019j,
                -0.58358198 - 1.88681233j,
                -0.59040194 - 1.88565713j,
                -0.58333899 - 1.88855748j,
                -0.58344058 - 1.89313358j,
                -0.58741365 - 1.8924981j,
                -0.58757614 - 1.88933261j,
                -0.58497331 - 1.8921263j,
                -0.58489966 - 1.88880557j,
                -0.58389984 - 1.88918537j,
                -0.57998735 - 1.88650841j,
                -0.58359358 - 1.88689002j,
                -0.58448799 - 1.89127431j,
                -0.58286154 - 1.89345826j,
                -0.58412816 - 1.89148774j,
                -0.58477666 - 1.8930424j,
                -0.58972851 - 1.89117695j,
                -0.58520997 - 1.89411843j,
                -0.58518193 - 1.88790154j,
                -0.58497068 - 1.89145941j,
                -0.58431803 - 1.88686764j,
                -0.58620182 - 1.88822202j,
                -0.58991013 - 1.89344791j,
                -0.58904883 - 1.89215971j,
                -0.58442332 - 1.89182106j,
                -0.58715143 - 1.89388986j,
                -0.58504354 - 1.89299916j,
                -0.5842482 - 1.89294092j,
                -0.58989309 - 1.88916195j,
                -0.58083861 - 1.89186029j,
                -0.5833934 - 1.88996488j,
                -0.58906565 - 1.89185614j,
                -0.59138365 - 1.89685039j,
                -0.58387868 - 1.89118792j,
                -0.58439766 - 1.89602988j,
                -0.58627099 - 1.89352353j,
                -0.58440606 - 1.89364076j,
                -0.58602947 - 1.89065039j,
                -0.58568256 - 1.88717946j,
                -0.58677006 - 1.88614172j,
                -0.58742394 - 1.88430522j,
                -0.58725372 - 1.88539457j,
                -0.58317072 - 1.88581176j,
                -0.5851962 - 1.88990868j,
                -0.58437864 - 1.88446482j,
                -0.58591049 - 1.88410132j,
                -0.58594268 - 1.88816793j,
                -0.58676486 - 1.88542422j,
                -0.58458049 - 1.88582197j,
                -0.58394509 - 1.88680076j,
                -0.58299551 - 1.87974261j,
                -0.58096665 - 1.87825349j,
                -0.58398327 - 1.88046575j,
                -0.58878492 - 1.88785606j,
                -0.58864194 - 1.89233518j,
                -0.58110408 - 1.88808657j,
                -0.58771497 - 1.88462609j,
                -0.58395948 - 1.88531996j,
                -0.58599419 - 1.8906272j,
                -0.58654174 - 1.88823624j,
                -0.58092148 - 1.88312861j,
                -0.58473685 - 1.88421076j,
                -0.58605 - 1.88630369j,
                -0.58175412 - 1.88202617j,
                -0.58433119 - 1.87732214j,
                -0.58346879 - 1.87703306j,
                -0.58394277 - 1.8846623j,
                -0.57938864 - 1.87983563j,
                -0.58430994 - 1.8760774j,
                -0.58286626 - 1.87218946j,
                -0.58266065 - 1.86767701j,
                -0.58686586 - 1.86649909j,
                -0.58343802 - 1.86901922j,
                -0.5785574 - 1.86577167j,
                -0.58173556 - 1.86338175j,
                -0.58015861 - 1.861289j,
                -0.57922173 - 1.86497934j,
                -0.58026239 - 1.86172288j,
                -0.5828322 - 1.86998413j,
                -0.57708524 - 1.86024227j,
                -0.58034879 - 1.85659786j,
                -0.57933218 - 1.86453859j,
                -0.58571282 - 1.85280666j,
                -0.5773559 - 1.84092287j,
                -0.57818209 - 1.84621624j,
                -0.58223184 - 1.8458843j,
                -0.5794855 - 1.84022567j,
                -0.5757636 - 1.82792792j,
                -0.58013938 - 1.82861345j,
                -0.58415228 - 1.83334776j,
                -0.57805216 - 1.84064241j,
                -0.58033437 - 1.83647977j,
                -0.58082094 - 1.84655914j,
                -0.58482827 - 1.853404j,
                -0.58130424 - 1.85640407j,
                -0.58264543 - 1.86128937j,
                -0.58098959 - 1.85851293j,
                -0.57677778 - 1.83447877j,
                -0.57382889 - 1.79547862j,
                -0.56884878 - 1.72360457j,
                -0.56376417 - 1.67753853j,
                -0.55124382 - 1.60518517j,
                -0.55636752 - 1.59768117j,
                -0.55834468 - 1.6710214j,
                -0.53934252 - 1.50390696j,
                -0.52618747 - 1.36652012j,
                -0.53035791 - 1.42108204j,
                -0.512108 - 1.26005728j,
                -0.47489942 - 0.93969339j,
                -0.48571984 - 1.0336651j,
                -0.48754119 - 1.08407185j,
                -0.48674269 - 0.99940961j,
                -0.5008463 - 1.16840898j,
                -0.51437963 - 1.27779398j,
                -0.51734125 - 1.29844155j,
                -0.52930727 - 1.41327261j,
                -0.52499809 - 1.39672607j,
                -0.53992123 - 1.50674989j,
                -0.55084491 - 1.6023574j,
                -0.55414622 - 1.624639j,
                -0.55449275 - 1.61566325j,
                -0.55578219 - 1.64184358j,
                -0.56143262 - 1.68618617j,
                -0.56979594 - 1.73935809j,
                -0.57172756 - 1.76985913j,
                -0.5809596 - 1.80801277j,
                -0.57896397 - 1.82973658j,
                -0.5804772 - 1.84555266j,
                -0.57971405 - 1.85409451j,
                -0.58227388 - 1.85828365j,
                -0.58096771 - 1.86370799j,
                -0.58156245 - 1.85595652j,
                -0.5801089 - 1.85459126j,
                -0.58268084 - 1.8613476j,
                -0.5819228 - 1.85812766j,
                -0.57839773 - 1.84588033j,
                -0.58166171 - 1.84910084j,
                -0.58106486 - 1.84847052j,
                -0.58457447 - 1.85544014j,
                -0.58627144 - 1.86128j,
                -0.57858228 - 1.85880866j,
                -0.58282819 - 1.85908161j,
                -0.58153024 - 1.85752947j,
                -0.58352255 - 1.86446984j,
            ]
        ),
        axis_name=[],
        axis=[],
    )
    sweep_points = np.array(
        [
            6.10433221e09,
            6.10493221e09,
            6.10553221e09,
            6.10613221e09,
            6.10673221e09,
            6.10733221e09,
            6.10793221e09,
            6.10853221e09,
            6.10913221e09,
            6.10973221e09,
            6.11033221e09,
            6.11093221e09,
            6.11153221e09,
            6.11213221e09,
            6.11273221e09,
            6.11333221e09,
            6.11393221e09,
            6.11453221e09,
            6.11513221e09,
            6.11573221e09,
            6.11633221e09,
            6.11693221e09,
            6.11753221e09,
            6.11813221e09,
            6.11873221e09,
            6.11933221e09,
            6.11993221e09,
            6.12053221e09,
            6.12113221e09,
            6.12173221e09,
            6.12233221e09,
            6.12293221e09,
            6.12353221e09,
            6.12413221e09,
            6.12473221e09,
            6.12533221e09,
            6.12593221e09,
            6.12653221e09,
            6.12713221e09,
            6.12773221e09,
            6.12833221e09,
            6.12893221e09,
            6.12953221e09,
            6.13013221e09,
            6.13073221e09,
            6.13133221e09,
            6.13193221e09,
            6.13253221e09,
            6.13313221e09,
            6.13373221e09,
            6.13433221e09,
            6.13493221e09,
            6.13553221e09,
            6.13613221e09,
            6.13673221e09,
            6.13733221e09,
            6.13793221e09,
            6.13853221e09,
            6.13913221e09,
            6.13973221e09,
            6.14033221e09,
            6.14093221e09,
            6.14153221e09,
            6.14213221e09,
            6.14273221e09,
            6.14333221e09,
            6.14393221e09,
            6.14453221e09,
            6.14513221e09,
            6.14573221e09,
            6.14633221e09,
            6.14693221e09,
            6.14753221e09,
            6.14813221e09,
            6.14873221e09,
            6.14933221e09,
            6.14993221e09,
            6.15053221e09,
            6.15113221e09,
            6.15173221e09,
            6.15233221e09,
            6.15293221e09,
            6.15353221e09,
            6.15413221e09,
            6.15473221e09,
            6.15533221e09,
            6.15593221e09,
            6.15653221e09,
            6.15713221e09,
            6.15773221e09,
            6.15833221e09,
            6.15893221e09,
            6.15953221e09,
            6.16013221e09,
            6.16073221e09,
            6.16133221e09,
            6.16193221e09,
            6.16253221e09,
            6.16313221e09,
            6.16373221e09,
            6.16433221e09,
            6.16493221e09,
            6.16553221e09,
            6.16613221e09,
            6.16673221e09,
            6.16733221e09,
            6.16793221e09,
            6.16853221e09,
            6.16913221e09,
            6.16973221e09,
            6.17033221e09,
            6.17093221e09,
            6.17153221e09,
            6.17213221e09,
            6.17273221e09,
            6.17333221e09,
            6.17393221e09,
            6.17453221e09,
            6.17513221e09,
            6.17573221e09,
            6.17633221e09,
            6.17693221e09,
            6.17753221e09,
            6.17813221e09,
            6.17873221e09,
            6.17933221e09,
            6.17993221e09,
            6.18053221e09,
            6.18113221e09,
            6.18173221e09,
            6.18233221e09,
            6.18293221e09,
            6.18353221e09,
            6.18413221e09,
            6.18473221e09,
            6.18533221e09,
            6.18593221e09,
            6.18653221e09,
            6.18713221e09,
            6.18773221e09,
            6.18833221e09,
            6.18893221e09,
            6.18953221e09,
            6.19013221e09,
            6.19073221e09,
            6.19133221e09,
            6.19193221e09,
            6.19253221e09,
            6.19313221e09,
            6.19373221e09,
            6.19433221e09,
            6.19493221e09,
            6.19553221e09,
            6.19613221e09,
            6.19673221e09,
            6.19733221e09,
            6.19793221e09,
            6.19853221e09,
            6.19913221e09,
            6.19973221e09,
            6.20033221e09,
            6.20093221e09,
            6.20153221e09,
            6.20213221e09,
            6.20273221e09,
            6.20333221e09,
            6.20393221e09,
            6.20453221e09,
            6.20513221e09,
            6.20573221e09,
            6.20633221e09,
            6.20693221e09,
            6.20753221e09,
            6.20813221e09,
            6.20873221e09,
            6.20933221e09,
            6.20993221e09,
            6.21053221e09,
            6.21113221e09,
            6.21173221e09,
            6.21233221e09,
            6.21293221e09,
            6.21353221e09,
            6.21413221e09,
            6.21473221e09,
            6.21533221e09,
            6.21593221e09,
            6.21653221e09,
            6.21713221e09,
            6.21773221e09,
            6.21833221e09,
            6.21893221e09,
            6.21953221e09,
            6.22013221e09,
            6.22073221e09,
            6.22133221e09,
            6.22193221e09,
            6.22253221e09,
            6.22313221e09,
            6.22373221e09,
            6.22433221e09,
        ]
    )
    return RunExperimentResults(data=data), sweep_points


class TestQubitSpectroscopyAnalysisSingleQubit:
    def test_create_and_run(
        self, single_tunable_transmon_platform, results_single_qubit
    ):
        [q0] = single_tunable_transmon_platform.qpu.quantum_elements
        options = qubit_spectroscopy.analysis_workflow.options()
        result = qubit_spectroscopy.analysis_workflow(
            result=results_single_qubit[0],
            qubits=q0,
            frequencies=results_single_qubit[1],
            options=options,
        ).run()

        assert len(result.tasks) == 5

        proc_data_dict = result.tasks["calculate_signal_magnitude_and_phase"].output
        np.testing.assert_array_almost_equal(
            proc_data_dict["q0"]["magnitude"],
            np.array(
                [
                    1.96115506,
                    1.97167168,
                    1.97574724,
                    1.97508348,
                    1.97027065,
                    1.9782153,
                    1.97901144,
                    1.98068189,
                    1.98272098,
                    1.97764058,
                    1.97731777,
                    1.98334076,
                    1.98316209,
                    1.9842831,
                    1.98353034,
                    1.98324422,
                    1.97663214,
                    1.97817882,
                    1.98195531,
                    1.97946963,
                    1.97737341,
                    1.97921709,
                    1.97869709,
                    1.97831869,
                    1.98143393,
                    1.98041165,
                    1.97766483,
                    1.9833734,
                    1.98579218,
                    1.97745856,
                    1.97783093,
                    1.97778806,
                    1.53335673,
                    1.63088846,
                    1.73985083,
                    1.81740783,
                    1.86778957,
                    1.91063428,
                    1.9414293,
                    1.95288792,
                    1.95651417,
                    1.97141211,
                    1.97442231,
                    1.97626437,
                    1.97624834,
                    1.97792029,
                    1.9829139,
                    1.976315,
                    1.97279769,
                    1.97396463,
                    1.97296576,
                    1.97856192,
                    1.97322007,
                    1.97906554,
                    1.97910662,
                    1.97868223,
                    1.97327943,
                    1.97568842,
                    1.97500094,
                    1.9759244,
                    1.9765965,
                    1.98099916,
                    1.98156601,
                    1.97859128,
                    1.98048876,
                    1.97729464,
                    1.97736198,
                    1.97365126,
                    1.97507859,
                    1.97953144,
                    1.98113901,
                    1.97962915,
                    1.98130595,
                    1.98099216,
                    1.98246194,
                    1.97651464,
                    1.97985085,
                    1.97527139,
                    1.9771229,
                    1.9832143,
                    1.98172825,
                    1.98003474,
                    1.98281759,
                    1.98134343,
                    1.98105307,
                    1.97911766,
                    1.97901714,
                    1.97795731,
                    1.98144341,
                    1.98690111,
                    1.97926907,
                    1.98404887,
                    1.98220711,
                    1.98176834,
                    1.97939118,
                    1.97597327,
                    1.97530496,
                    1.97374594,
                    1.97473532,
                    1.97392353,
                    1.97843611,
                    1.97299418,
                    1.97310134,
                    1.97699442,
                    1.97461831,
                    1.97435024,
                    1.9750972,
                    1.9680742,
                    1.96605148,
                    1.96905762,
                    1.97754094,
                    1.9817749,
                    1.975488,
                    1.9741389,
                    1.97368691,
                    1.97935858,
                    1.97723729,
                    1.9706961,
                    1.97285766,
                    1.97524586,
                    1.96988841,
                    1.96615903,
                    1.96562686,
                    1.97305376,
                    1.96709766,
                    1.96496425,
                    1.9608229,
                    1.95645364,
                    1.95658641,
                    1.95796649,
                    1.95341563,
                    1.95207782,
                    1.94961041,
                    1.95285579,
                    1.95005552,
                    1.95870723,
                    1.9476983,
                    1.94518902,
                    1.95246765,
                    1.94318091,
                    1.92933585,
                    1.93463406,
                    1.93553165,
                    1.9293092,
                    1.91646137,
                    1.91843395,
                    1.92416161,
                    1.92927675,
                    1.9259922,
                    1.93575144,
                    1.94348412,
                    1.94528936,
                    1.95035223,
                    1.94720806,
                    1.92301455,
                    1.88494644,
                    1.81504866,
                    1.76973602,
                    1.69720039,
                    1.69178306,
                    1.76183464,
                    1.59769412,
                    1.46432595,
                    1.51682355,
                    1.36014666,
                    1.05287849,
                    1.14209776,
                    1.18865815,
                    1.11163754,
                    1.27123034,
                    1.37744105,
                    1.39770971,
                    1.5091407,
                    1.49213495,
                    1.60056557,
                    1.69439646,
                    1.71654592,
                    1.70816567,
                    1.7333621,
                    1.77719735,
                    1.83030981,
                    1.8599123,
                    1.89905877,
                    1.91914962,
                    1.93468819,
                    1.94261031,
                    1.94737284,
                    1.95216059,
                    1.94493945,
                    1.94320228,
                    1.95041838,
                    1.94711904,
                    1.93437796,
                    1.9384283,
                    1.93764797,
                    1.94534969,
                    1.95142959,
                    1.9467735,
                    1.94830007,
                    1.94643087,
                    1.95364949,
                ]
            ),
        )
        np.testing.assert_array_almost_equal(
            proc_data_dict["q0"]["phase"],
            np.array(
                [
                    -1.87240169,
                    -1.87071263,
                    -1.87254674,
                    -1.87095699,
                    -1.87170864,
                    -1.87024979,
                    -1.87024189,
                    -1.87138496,
                    -1.86924193,
                    -1.87214608,
                    -1.87131209,
                    -1.87025163,
                    -1.87147944,
                    -1.87220592,
                    -1.87133847,
                    -1.86915023,
                    -1.87303157,
                    -1.87199331,
                    -1.86954578,
                    -1.87137733,
                    -1.87002851,
                    -1.87074321,
                    -1.87048286,
                    -1.87259509,
                    -1.87158064,
                    -1.87306943,
                    -1.87050973,
                    -1.8698137,
                    -1.87151804,
                    -1.87057544,
                    -1.87045897,
                    -1.87052188,
                    -1.86232262,
                    -1.88841766,
                    -1.88690509,
                    -1.88375145,
                    -1.88226804,
                    -1.87658641,
                    -1.87624917,
                    -1.87447099,
                    -1.87131233,
                    -1.871867,
                    -1.87171649,
                    -1.87233226,
                    -1.8719433,
                    -1.86887261,
                    -1.871329,
                    -1.87118759,
                    -1.86948261,
                    -1.8730018,
                    -1.8695508,
                    -1.86885063,
                    -1.86937648,
                    -1.86843046,
                    -1.87194791,
                    -1.86993178,
                    -1.86920634,
                    -1.87036278,
                    -1.87075885,
                    -1.87422902,
                    -1.87038052,
                    -1.86974779,
                    -1.87175833,
                    -1.87231102,
                    -1.87063717,
                    -1.87109764,
                    -1.87055781,
                    -1.86906437,
                    -1.87075284,
                    -1.87053007,
                    -1.86942021,
                    -1.87032457,
                    -1.87040578,
                    -1.87307204,
                    -1.87045441,
                    -1.87136936,
                    -1.87073539,
                    -1.87110658,
                    -1.87181408,
                    -1.87281858,
                    -1.87259698,
                    -1.87041733,
                    -1.87142395,
                    -1.87054091,
                    -1.87016602,
                    -1.87345452,
                    -1.86868082,
                    -1.87019681,
                    -1.87265063,
                    -1.87301725,
                    -1.87024884,
                    -1.86977885,
                    -1.87105443,
                    -1.87013799,
                    -1.87136718,
                    -1.87171955,
                    -1.87240107,
                    -1.8729938,
                    -1.87274733,
                    -1.87070959,
                    -1.87107588,
                    -1.87149618,
                    -1.87229228,
                    -1.87169701,
                    -1.87250649,
                    -1.87139023,
                    -1.87093622,
                    -1.87153561,
                    -1.87077434,
                    -1.87190594,
                    -1.87311644,
                    -1.87237463,
                    -1.86936995,
                    -1.87308617,
                    -1.871165,
                    -1.87135362,
                    -1.87197614,
                    -1.87002144,
                    -1.87170774,
                    -1.87202863,
                    -1.87059031,
                    -1.87254913,
                    -1.87217391,
                    -1.87125554,
                    -1.8697703,
                    -1.87272706,
                    -1.87261372,
                    -1.87319898,
                    -1.87543001,
                    -1.87337384,
                    -1.87148423,
                    -1.87340188,
                    -1.87294967,
                    -1.87192932,
                    -1.87293427,
                    -1.8729318,
                    -1.87160313,
                    -1.87376067,
                    -1.8720503,
                    -1.87697748,
                    -1.87470403,
                    -1.87429273,
                    -1.87634068,
                    -1.8758654,
                    -1.87594038,
                    -1.87800857,
                    -1.87925241,
                    -1.87509189,
                    -1.87686997,
                    -1.8755407,
                    -1.87645087,
                    -1.87425918,
                    -1.87416691,
                    -1.87378134,
                    -1.87541998,
                    -1.88013331,
                    -1.8895749,
                    -1.89500453,
                    -1.9015923,
                    -1.90589735,
                    -1.8932671,
                    -1.91513642,
                    -1.93835438,
                    -1.92799421,
                    -1.95682186,
                    -2.03873627,
                    -2.01007579,
                    -1.99342689,
                    -2.02401439,
                    -1.97576012,
                    -1.95350152,
                    -1.94995064,
                    -1.92915133,
                    -1.93033621,
                    -1.91487716,
                    -1.90191169,
                    -1.89951051,
                    -1.90139885,
                    -1.89719956,
                    -1.89221088,
                    -1.88736881,
                    -1.8832505,
                    -1.88170068,
                    -1.87724781,
                    -1.87552731,
                    -1.87383327,
                    -1.87444593,
                    -1.87297662,
                    -1.87445464,
                    -1.87395092,
                    -1.87417532,
                    -1.87429782,
                    -1.87445101,
                    -1.87556103,
                    -1.8753648,
                    -1.87601149,
                    -1.87594163,
                    -1.87255578,
                    -1.87459496,
                    -1.87419721,
                    -1.87410904,
                ]
            ),
        )

        fit_values = result.tasks["fit_data"].output["q0"].best_values
        np.testing.assert_allclose(fit_values["width"], 3200588.271896812, rtol=1e-4)
        np.testing.assert_allclose(fit_values["position"], 6204602795.372227, rtol=1e-4)
        np.testing.assert_allclose(
            fit_values["amplitude"], -2744249.570512245, rtol=1e-4
        )
        np.testing.assert_allclose(fit_values["offset"], 1.9721753382823548, rtol=1e-4)

        qubit_parameters = result.tasks["extract_qubit_parameters"].output
        np.testing.assert_almost_equal(
            qubit_parameters["old_parameter_values"]["q0"]["resonance_frequency_ge"],
            6.5e9,
        )
        np.testing.assert_allclose(
            qubit_parameters["new_parameter_values"]["q0"][
                "resonance_frequency_ge"
            ].nominal_value,
            6204602795.372227,
            rtol=1e-4,
        )
        np.testing.assert_allclose(
            qubit_parameters["new_parameter_values"]["q0"][
                "resonance_frequency_ge"
            ].std_dev,
            95868.157179296,
            rtol=1e-4,
        )

    def test_create_and_run_specify_spectral_feature(
        self, single_tunable_transmon_platform, results_single_qubit
    ):
        [q0] = single_tunable_transmon_platform.qpu.quantum_elements
        options = qubit_spectroscopy.analysis_workflow.options()
        options.spectral_feature("peak")
        result = qubit_spectroscopy.analysis_workflow(
            result=results_single_qubit[0],
            qubits=q0,
            frequencies=results_single_qubit[1],
            options=options,
        ).run()

        fit_values = result.tasks["fit_data"].output["q0"].best_values
        np.testing.assert_allclose(fit_values["position"], 6141479733.959184, rtol=1e-4)
        np.testing.assert_allclose(fit_values["width"], 67101602.53928327, rtol=1e-4)
        np.testing.assert_allclose(
            fit_values["amplitude"], 27290960.511352144, rtol=1e-4
        )
        np.testing.assert_allclose(fit_values["offset"], 1.5880166617175584, rtol=1e-4)

    def test_create_and_run_frequency_filter(
        self, single_tunable_transmon_platform, results_single_qubit
    ):
        [q0] = single_tunable_transmon_platform.qpu.quantum_elements
        options = qubit_spectroscopy.analysis_workflow.options()
        options.frequency_filters({q0.uid: (None, 6.16e9)})
        result = qubit_spectroscopy.analysis_workflow(
            result=results_single_qubit[0],
            qubits=q0,
            frequencies=results_single_qubit[1],
            options=options,
        ).run()

        fit_res = result.tasks["fit_data"].output["q0"]
        np.testing.assert_allclose(
            fit_res.best_values["position"], 6123903111.013932, rtol=1e-4
        )
        assert len(fit_res.userkws["x"]) == 92

    def test_create_and_run_no_fitting(
        self, single_tunable_transmon_platform, results_single_qubit
    ):
        [q0] = single_tunable_transmon_platform.qpu.quantum_elements
        options = qubit_spectroscopy.analysis_workflow.options()
        options.do_fitting(False)

        result = qubit_spectroscopy.analysis_workflow(
            result=results_single_qubit[0],
            qubits=q0,
            frequencies=results_single_qubit[1],
            options=options,
        ).run()

        assert len(result.tasks) == 5

        task_names = [t.name for t in result.tasks]
        assert len(result.tasks["fit_data"].output) == 0
        qb_pars = result.tasks["extract_qubit_parameters"].output
        assert qb_pars["old_parameter_values"]["q0"]["resonance_frequency_ge"] == 6.5e9
        assert len(qb_pars["new_parameter_values"]["q0"]) == 0
        assert "plot_raw_complex_data_1d" in task_names
        assert "plot_qubit_spectroscopy" in task_names

    def test_create_and_run_no_plotting(
        self, single_tunable_transmon_platform, results_single_qubit
    ):
        [q0] = single_tunable_transmon_platform.qpu.quantum_elements
        options = qubit_spectroscopy.analysis_workflow.options()
        options.do_plotting(False)

        result = qubit_spectroscopy.analysis_workflow(
            result=results_single_qubit[0],
            qubits=q0,
            frequencies=results_single_qubit[1],
            options=options,
        ).run()

        assert len(result.tasks) == 3

        task_names = [t.name for t in result.tasks]
        assert "plot_raw_complex_data_1d" not in task_names
        assert "plot_qubit_spectroscopy" not in task_names
        assert "fit_data" in task_names
        assert "extract_qubit_parameters" in task_names


@pytest.fixture
def results_two_qubit():
    """Results from a qubit-spectroscopy experiment.

    In the AcquiredResults below, the axis corresponds to the qubit ge frequency, and
    the data is the magnitude of the acquired complex signal. For q0, the data has a
    double-dipped Lorentzian line-shape, and for q1, it has an upward-pointing
    Lorentzian line-shape.
    """
    data = {}
    data[handles.result_handle("q0")] = AcquiredResult(
        data=np.array(
            [
                -0.58256794 - 1.87263017j,
                -0.58251117 - 1.88365866j,
                -0.58717625 - 1.88647852j,
                -0.58398021 - 1.88677552j,
                -0.58397177 - 1.88173947j,
                -0.58356964 - 1.89018048j,
                -0.58378955 - 1.89094581j,
                -0.58644525 - 1.89187281j,
                -0.58298912 - 1.89507419j,
                -0.58698233 - 1.88852165j,
                -0.58531156 - 1.88870218j,
                -0.58508512 - 1.89507677j,
                -0.58735855 - 1.89418632j,
                -0.58906728 - 1.89482959j,
                -0.58720054 - 1.89462085j,
                -0.58296914 - 1.89562776j,
                -0.58835419 - 1.88703841j,
                -0.58685348 - 1.88912531j,
                -0.58333955 - 1.8941652j,
                -0.58607189 - 1.89071938j,
                -0.58290317 - 1.8895051j,
                -0.5847982 - 1.89084938j,
                -0.5841524 - 1.89050474j,
                -0.58803179 - 1.88890536j,
                -0.58703823 - 1.8924763j,
                -0.58955076 - 1.89062429j,
                -0.58389842 - 1.8895028j,
                -0.58426476 - 1.89536401j,
                -0.58821072 - 1.89667571j,
                -0.58396167 - 1.88926735j,
                -0.58385154 - 1.88969113j,
                -0.58395775 - 1.88961344j,
                -0.44070889 - 1.46865876j,
                -0.50933912 - 1.54931302j,
                -0.54086827 - 1.65364519j,
                -0.55952819 - 1.72913256j,
                -0.57240254 - 1.77791822j,
                -0.57519014 - 1.82199881j,
                -0.58383649 - 1.85156223j,
                -0.58396963 - 1.86353178j,
                -0.57915387 - 1.86883078j,
                -0.58460825 - 1.88273708j,
                -0.58521708 - 1.88569998j,
                -0.5869252 - 1.88709821j,
                -0.58618639 - 1.88731105j,
                -0.58087932 - 1.89070037j,
                -0.58700011 - 1.89403759j,
                -0.5847797 - 1.88781717j,
                -0.58052513 - 1.88544989j,
                -0.5875041 - 1.8845093j,
                -0.58070318 - 1.88557093j,
                -0.58102619 - 1.89132647j,
                -0.58044928 - 1.88591519j,
                -0.58037913 - 1.89205192j,
                -0.58704292 - 1.890038j,
                -0.5831061 - 1.89081216j,
                -0.58014585 - 1.88607065j,
                -0.5830375 - 1.88770019j,
                -0.58358198 - 1.88681233j,
                -0.59040194 - 1.88565713j,
                -0.58333899 - 1.88855748j,
                -0.58344058 - 1.89313358j,
                -0.58741365 - 1.8924981j,
                -0.58757614 - 1.88933261j,
                -0.58497331 - 1.8921263j,
                -0.58489966 - 1.88880557j,
                -0.58389984 - 1.88918537j,
                -0.57998735 - 1.88650841j,
                -0.58359358 - 1.88689002j,
                -0.58448799 - 1.89127431j,
                -0.58286154 - 1.89345826j,
                -0.58412816 - 1.89148774j,
                -0.58477666 - 1.8930424j,
                -0.58972851 - 1.89117695j,
                -0.58520997 - 1.89411843j,
                -0.58518193 - 1.88790154j,
                -0.58497068 - 1.89145941j,
                -0.58431803 - 1.88686764j,
                -0.58620182 - 1.88822202j,
                -0.58991013 - 1.89344791j,
                -0.58904883 - 1.89215971j,
                -0.58442332 - 1.89182106j,
                -0.58715143 - 1.89388986j,
                -0.58504354 - 1.89299916j,
                -0.5842482 - 1.89294092j,
                -0.58989309 - 1.88916195j,
                -0.58083861 - 1.89186029j,
                -0.5833934 - 1.88996488j,
                -0.58906565 - 1.89185614j,
                -0.59138365 - 1.89685039j,
                -0.58387868 - 1.89118792j,
                -0.58439766 - 1.89602988j,
                -0.58627099 - 1.89352353j,
                -0.58440606 - 1.89364076j,
                -0.58602947 - 1.89065039j,
                -0.58568256 - 1.88717946j,
                -0.58677006 - 1.88614172j,
                -0.58742394 - 1.88430522j,
                -0.58725372 - 1.88539457j,
                -0.58317072 - 1.88581176j,
                -0.5851962 - 1.88990868j,
                -0.58437864 - 1.88446482j,
                -0.58591049 - 1.88410132j,
                -0.58594268 - 1.88816793j,
                -0.58676486 - 1.88542422j,
                -0.58458049 - 1.88582197j,
                -0.58394509 - 1.88680076j,
                -0.58299551 - 1.87974261j,
                -0.58096665 - 1.87825349j,
                -0.58398327 - 1.88046575j,
                -0.58878492 - 1.88785606j,
                -0.58864194 - 1.89233518j,
                -0.58110408 - 1.88808657j,
                -0.58771497 - 1.88462609j,
                -0.58395948 - 1.88531996j,
                -0.58599419 - 1.8906272j,
                -0.58654174 - 1.88823624j,
                -0.58092148 - 1.88312861j,
                -0.58473685 - 1.88421076j,
                -0.58605 - 1.88630369j,
                -0.58175412 - 1.88202617j,
                -0.58433119 - 1.87732214j,
                -0.58346879 - 1.87703306j,
                -0.58394277 - 1.8846623j,
                -0.57938864 - 1.87983563j,
                -0.58430994 - 1.8760774j,
                -0.58286626 - 1.87218946j,
                -0.58266065 - 1.86767701j,
                -0.58686586 - 1.86649909j,
                -0.58343802 - 1.86901922j,
                -0.5785574 - 1.86577167j,
                -0.58173556 - 1.86338175j,
                -0.58015861 - 1.861289j,
                -0.57922173 - 1.86497934j,
                -0.58026239 - 1.86172288j,
                -0.5828322 - 1.86998413j,
                -0.57708524 - 1.86024227j,
                -0.58034879 - 1.85659786j,
                -0.57933218 - 1.86453859j,
                -0.58571282 - 1.85280666j,
                -0.5773559 - 1.84092287j,
                -0.57818209 - 1.84621624j,
                -0.58223184 - 1.8458843j,
                -0.5794855 - 1.84022567j,
                -0.5757636 - 1.82792792j,
                -0.58013938 - 1.82861345j,
                -0.58415228 - 1.83334776j,
                -0.57805216 - 1.84064241j,
                -0.58033437 - 1.83647977j,
                -0.58082094 - 1.84655914j,
                -0.58482827 - 1.853404j,
                -0.58130424 - 1.85640407j,
                -0.58264543 - 1.86128937j,
                -0.58098959 - 1.85851293j,
                -0.57677778 - 1.83447877j,
                -0.57382889 - 1.79547862j,
                -0.56884878 - 1.72360457j,
                -0.56376417 - 1.67753853j,
                -0.55124382 - 1.60518517j,
                -0.55636752 - 1.59768117j,
                -0.55834468 - 1.6710214j,
                -0.53934252 - 1.50390696j,
                -0.52618747 - 1.36652012j,
                -0.53035791 - 1.42108204j,
                -0.512108 - 1.26005728j,
                -0.47489942 - 0.93969339j,
                -0.48571984 - 1.0336651j,
                -0.48754119 - 1.08407185j,
                -0.48674269 - 0.99940961j,
                -0.5008463 - 1.16840898j,
                -0.51437963 - 1.27779398j,
                -0.51734125 - 1.29844155j,
                -0.52930727 - 1.41327261j,
                -0.52499809 - 1.39672607j,
                -0.53992123 - 1.50674989j,
                -0.55084491 - 1.6023574j,
                -0.55414622 - 1.624639j,
                -0.55449275 - 1.61566325j,
                -0.55578219 - 1.64184358j,
                -0.56143262 - 1.68618617j,
                -0.56979594 - 1.73935809j,
                -0.57172756 - 1.76985913j,
                -0.5809596 - 1.80801277j,
                -0.57896397 - 1.82973658j,
                -0.5804772 - 1.84555266j,
                -0.57971405 - 1.85409451j,
                -0.58227388 - 1.85828365j,
                -0.58096771 - 1.86370799j,
                -0.58156245 - 1.85595652j,
                -0.5801089 - 1.85459126j,
                -0.58268084 - 1.8613476j,
                -0.5819228 - 1.85812766j,
                -0.57839773 - 1.84588033j,
                -0.58166171 - 1.84910084j,
                -0.58106486 - 1.84847052j,
                -0.58457447 - 1.85544014j,
                -0.58627144 - 1.86128j,
                -0.57858228 - 1.85880866j,
                -0.58282819 - 1.85908161j,
                -0.58153024 - 1.85752947j,
                -0.58352255 - 1.86446984j,
            ]
        ),
        axis_name=[],
        axis=[],
    )
    data[handles.result_handle("q1")] = AcquiredResult(
        data=np.array(
            [
                0.14757315 - 0.09331405j,
                0.15024753 - 0.08371652j,
                0.15195737 - 0.08943779j,
                0.15305503 - 0.08375744j,
                0.1527448 - 0.0832131j,
                0.14723103 - 0.08619091j,
                0.15691315 - 0.08288577j,
                0.15449738 - 0.08221774j,
                0.15182875 - 0.08753549j,
                0.15343899 - 0.0876048j,
                0.15228988 - 0.08495047j,
                0.15202252 - 0.08452634j,
                0.15224769 - 0.08506557j,
                0.15193691 - 0.08893529j,
                0.15700056 - 0.08243175j,
                0.15369525 - 0.09081968j,
                0.15019288 - 0.08573575j,
                0.15400071 - 0.08057953j,
                0.15124613 - 0.08333654j,
                0.1538251 - 0.08514227j,
                0.15287885 - 0.08239946j,
                0.15360723 - 0.08146885j,
                0.15592012 - 0.08247391j,
                0.1540156 - 0.08621011j,
                0.15078153 - 0.0853143j,
                0.15226514 - 0.08561633j,
                0.14942841 - 0.08411151j,
                0.15476712 - 0.09079783j,
                0.15505337 - 0.07986806j,
                0.15367235 - 0.08105207j,
                0.15336311 - 0.08483203j,
                0.14439389 - 0.08167684j,
                0.15731892 - 0.08685534j,
                0.14777235 - 0.08609526j,
                0.15038075 - 0.08149853j,
                0.15469375 - 0.08386547j,
                0.15175971 - 0.08609519j,
                0.15305514 - 0.08429677j,
                0.15168648 - 0.08338062j,
                0.15407432 - 0.08919267j,
                0.15053202 - 0.08467392j,
                0.14947666 - 0.08828007j,
                0.14575552 - 0.08865484j,
                0.15124741 - 0.08954082j,
                0.1487873 - 0.08666235j,
                0.152498 - 0.07926016j,
                0.15713469 - 0.08793242j,
                0.15472291 - 0.08136954j,
                0.15638301 - 0.08169013j,
                0.14910885 - 0.08457567j,
                0.14704359 - 0.08545445j,
                0.1522177 - 0.08097333j,
                0.15091969 - 0.08025915j,
                0.15182107 - 0.08130598j,
                0.1521237 - 0.08757903j,
                0.15065258 - 0.08360279j,
                0.15749935 - 0.08281876j,
                0.15581104 - 0.08585782j,
                0.1503004 - 0.07665365j,
                0.1521287 - 0.08304185j,
                0.15033167 - 0.08756288j,
                0.15162742 - 0.08540868j,
                0.15578353 - 0.08082633j,
                0.15232494 - 0.08720382j,
                0.15350519 - 0.08044429j,
                0.15341319 - 0.08483779j,
                0.15601117 - 0.08725349j,
                0.15149744 - 0.08151583j,
                0.15463375 - 0.08348364j,
                0.15347278 - 0.08113207j,
                0.15671139 - 0.08371645j,
                0.15355789 - 0.08097949j,
                0.15609951 - 0.07973992j,
                0.15085929 - 0.09019191j,
                0.151653 - 0.08561044j,
                0.15527985 - 0.08365445j,
                0.14938261 - 0.08147124j,
                0.15107994 - 0.08208548j,
                0.15054795 - 0.08593067j,
                0.15636033 - 0.08341689j,
                0.15347269 - 0.08553288j,
                0.1496218 - 0.08105248j,
                0.15020038 - 0.08270042j,
                0.14983799 - 0.085414j,
                0.14854376 - 0.07988668j,
                0.15317157 - 0.08548195j,
                0.15263163 - 0.09190503j,
                0.1530464 - 0.08312946j,
                0.15741531 - 0.08444279j,
                0.15426658 - 0.08375561j,
                0.15121352 - 0.08203808j,
                0.15227965 - 0.08375913j,
                0.15427706 - 0.08108294j,
                0.15350593 - 0.07889218j,
                0.15315463 - 0.0858729j,
                0.15482966 - 0.08197324j,
                0.15539534 - 0.08648513j,
                0.15179847 - 0.08412397j,
                0.15337254 - 0.08527572j,
                0.15164775 - 0.08449391j,
                0.1564632 - 0.08100028j,
                0.15489817 - 0.08704948j,
                0.15585403 - 0.08404943j,
                0.15092454 - 0.08568793j,
                0.14843617 - 0.08365657j,
                0.15334864 - 0.09056144j,
                0.15413087 - 0.08668776j,
                0.15232667 - 0.08547994j,
                0.14852099 - 0.08572791j,
                0.15702012 - 0.08563622j,
                0.1510714 - 0.08237618j,
                0.15322755 - 0.08104956j,
                0.1516581 - 0.0871274j,
                0.14979212 - 0.08695314j,
                0.15191618 - 0.08245058j,
                0.15151842 - 0.08655507j,
                0.15032714 - 0.08973753j,
                0.15344467 - 0.08670335j,
                0.14835009 - 0.09238398j,
                0.14778077 - 0.0885396j,
                0.14678654 - 0.08912614j,
                0.14443545 - 0.08893475j,
                0.14852245 - 0.08794721j,
                0.15243127 - 0.08347675j,
                0.14929988 - 0.08901809j,
                0.14708602 - 0.09200365j,
                0.14572325 - 0.095785j,
                0.15454756 - 0.09198706j,
                0.15391303 - 0.08510645j,
                0.15083848 - 0.08984658j,
                0.14836446 - 0.0936312j,
                0.14706563 - 0.08259448j,
                0.15038602 - 0.0895858j,
                0.14667721 - 0.09109956j,
                0.14552266 - 0.09296082j,
                0.14374413 - 0.09386911j,
                0.14947297 - 0.08991434j,
                0.13695525 - 0.09717856j,
                0.14098241 - 0.10115839j,
                0.14113143 - 0.09954513j,
                0.14109299 - 0.10472078j,
                0.14344296 - 0.1083509j,
                0.13989425 - 0.10503945j,
                0.13952586 - 0.11027668j,
                0.132705 - 0.11120565j,
                0.13384923 - 0.11227279j,
                0.13274163 - 0.12108246j,
                0.12682948 - 0.1285014j,
                0.12830363 - 0.12361946j,
                0.12684432 - 0.13052005j,
                0.13128879 - 0.1284187j,
                0.1292165 - 0.12615106j,
                0.13543585 - 0.12296908j,
                0.13500542 - 0.11127351j,
                0.14030989 - 0.11279663j,
                0.13169068 - 0.11533528j,
                0.12076996 - 0.13084298j,
                0.09541894 - 0.1767737j,
                0.06593547 - 0.24185356j,
                0.05402043 - 0.26048351j,
                0.06185118 - 0.23799852j,
                -0.03669764 - 0.42162016j,
                -0.04493526 - 0.45170477j,
                -0.18133458 - 0.70025322j,
                -0.17008507 - 0.66759075j,
                -0.14205185 - 0.62739968j,
                -0.10442866 - 0.54201963j,
                -0.0518168 - 0.45888197j,
                0.00258849 - 0.3632778j,
                0.00194685 - 0.36482405j,
                0.03568307 - 0.29574803j,
                0.05735359 - 0.26130878j,
                0.06987002 - 0.24622566j,
                0.07350356 - 0.22592915j,
                0.09925913 - 0.19795933j,
                0.11195302 - 0.15262946j,
                0.12175183 - 0.13844449j,
                0.13448494 - 0.12809718j,
                0.13663583 - 0.11492936j,
                0.13574989 - 0.11331081j,
                0.13315368 - 0.11738711j,
                0.13268733 - 0.12225698j,
                0.12708631 - 0.12406862j,
                0.13510638 - 0.11644852j,
                0.13001907 - 0.12346556j,
                0.1338673 - 0.12090528j,
                0.13410401 - 0.11501304j,
                0.13498558 - 0.11442606j,
                0.1346007 - 0.11754537j,
                0.13716378 - 0.11016584j,
                0.13832105 - 0.11072196j,
                0.13942068 - 0.11098672j,
                0.14125405 - 0.11114198j,
                0.14781216 - 0.10114994j,
                0.14207023 - 0.10150151j,
                0.14537616 - 0.09341421j,
                0.14610277 - 0.10121051j,
                0.1477346 - 0.0960286j,
                0.14918847 - 0.09635368j,
                0.14143726 - 0.09839994j,
                0.15051491 - 0.09418631j,
            ]
        ),
        axis_name=[],
        axis=[],
    )

    sweep_points = [
        np.array(
            [
                6.10433221e09,
                6.10493221e09,
                6.10553221e09,
                6.10613221e09,
                6.10673221e09,
                6.10733221e09,
                6.10793221e09,
                6.10853221e09,
                6.10913221e09,
                6.10973221e09,
                6.11033221e09,
                6.11093221e09,
                6.11153221e09,
                6.11213221e09,
                6.11273221e09,
                6.11333221e09,
                6.11393221e09,
                6.11453221e09,
                6.11513221e09,
                6.11573221e09,
                6.11633221e09,
                6.11693221e09,
                6.11753221e09,
                6.11813221e09,
                6.11873221e09,
                6.11933221e09,
                6.11993221e09,
                6.12053221e09,
                6.12113221e09,
                6.12173221e09,
                6.12233221e09,
                6.12293221e09,
                6.12353221e09,
                6.12413221e09,
                6.12473221e09,
                6.12533221e09,
                6.12593221e09,
                6.12653221e09,
                6.12713221e09,
                6.12773221e09,
                6.12833221e09,
                6.12893221e09,
                6.12953221e09,
                6.13013221e09,
                6.13073221e09,
                6.13133221e09,
                6.13193221e09,
                6.13253221e09,
                6.13313221e09,
                6.13373221e09,
                6.13433221e09,
                6.13493221e09,
                6.13553221e09,
                6.13613221e09,
                6.13673221e09,
                6.13733221e09,
                6.13793221e09,
                6.13853221e09,
                6.13913221e09,
                6.13973221e09,
                6.14033221e09,
                6.14093221e09,
                6.14153221e09,
                6.14213221e09,
                6.14273221e09,
                6.14333221e09,
                6.14393221e09,
                6.14453221e09,
                6.14513221e09,
                6.14573221e09,
                6.14633221e09,
                6.14693221e09,
                6.14753221e09,
                6.14813221e09,
                6.14873221e09,
                6.14933221e09,
                6.14993221e09,
                6.15053221e09,
                6.15113221e09,
                6.15173221e09,
                6.15233221e09,
                6.15293221e09,
                6.15353221e09,
                6.15413221e09,
                6.15473221e09,
                6.15533221e09,
                6.15593221e09,
                6.15653221e09,
                6.15713221e09,
                6.15773221e09,
                6.15833221e09,
                6.15893221e09,
                6.15953221e09,
                6.16013221e09,
                6.16073221e09,
                6.16133221e09,
                6.16193221e09,
                6.16253221e09,
                6.16313221e09,
                6.16373221e09,
                6.16433221e09,
                6.16493221e09,
                6.16553221e09,
                6.16613221e09,
                6.16673221e09,
                6.16733221e09,
                6.16793221e09,
                6.16853221e09,
                6.16913221e09,
                6.16973221e09,
                6.17033221e09,
                6.17093221e09,
                6.17153221e09,
                6.17213221e09,
                6.17273221e09,
                6.17333221e09,
                6.17393221e09,
                6.17453221e09,
                6.17513221e09,
                6.17573221e09,
                6.17633221e09,
                6.17693221e09,
                6.17753221e09,
                6.17813221e09,
                6.17873221e09,
                6.17933221e09,
                6.17993221e09,
                6.18053221e09,
                6.18113221e09,
                6.18173221e09,
                6.18233221e09,
                6.18293221e09,
                6.18353221e09,
                6.18413221e09,
                6.18473221e09,
                6.18533221e09,
                6.18593221e09,
                6.18653221e09,
                6.18713221e09,
                6.18773221e09,
                6.18833221e09,
                6.18893221e09,
                6.18953221e09,
                6.19013221e09,
                6.19073221e09,
                6.19133221e09,
                6.19193221e09,
                6.19253221e09,
                6.19313221e09,
                6.19373221e09,
                6.19433221e09,
                6.19493221e09,
                6.19553221e09,
                6.19613221e09,
                6.19673221e09,
                6.19733221e09,
                6.19793221e09,
                6.19853221e09,
                6.19913221e09,
                6.19973221e09,
                6.20033221e09,
                6.20093221e09,
                6.20153221e09,
                6.20213221e09,
                6.20273221e09,
                6.20333221e09,
                6.20393221e09,
                6.20453221e09,
                6.20513221e09,
                6.20573221e09,
                6.20633221e09,
                6.20693221e09,
                6.20753221e09,
                6.20813221e09,
                6.20873221e09,
                6.20933221e09,
                6.20993221e09,
                6.21053221e09,
                6.21113221e09,
                6.21173221e09,
                6.21233221e09,
                6.21293221e09,
                6.21353221e09,
                6.21413221e09,
                6.21473221e09,
                6.21533221e09,
                6.21593221e09,
                6.21653221e09,
                6.21713221e09,
                6.21773221e09,
                6.21833221e09,
                6.21893221e09,
                6.21953221e09,
                6.22013221e09,
                6.22073221e09,
                6.22133221e09,
                6.22193221e09,
                6.22253221e09,
                6.22313221e09,
                6.22373221e09,
                6.22433221e09,
            ]
        ),
        np.array(
            [
                6.57874386e09,
                6.57934386e09,
                6.57994386e09,
                6.58054386e09,
                6.58114386e09,
                6.58174386e09,
                6.58234386e09,
                6.58294386e09,
                6.58354386e09,
                6.58414386e09,
                6.58474386e09,
                6.58534386e09,
                6.58594386e09,
                6.58654386e09,
                6.58714386e09,
                6.58774386e09,
                6.58834386e09,
                6.58894386e09,
                6.58954386e09,
                6.59014386e09,
                6.59074386e09,
                6.59134386e09,
                6.59194386e09,
                6.59254386e09,
                6.59314386e09,
                6.59374386e09,
                6.59434386e09,
                6.59494386e09,
                6.59554386e09,
                6.59614386e09,
                6.59674386e09,
                6.59734386e09,
                6.59794386e09,
                6.59854386e09,
                6.59914386e09,
                6.59974386e09,
                6.60034386e09,
                6.60094386e09,
                6.60154386e09,
                6.60214386e09,
                6.60274386e09,
                6.60334386e09,
                6.60394386e09,
                6.60454386e09,
                6.60514386e09,
                6.60574386e09,
                6.60634386e09,
                6.60694386e09,
                6.60754386e09,
                6.60814386e09,
                6.60874386e09,
                6.60934386e09,
                6.60994386e09,
                6.61054386e09,
                6.61114386e09,
                6.61174386e09,
                6.61234386e09,
                6.61294386e09,
                6.61354386e09,
                6.61414386e09,
                6.61474386e09,
                6.61534386e09,
                6.61594386e09,
                6.61654386e09,
                6.61714386e09,
                6.61774386e09,
                6.61834386e09,
                6.61894386e09,
                6.61954386e09,
                6.62014386e09,
                6.62074386e09,
                6.62134386e09,
                6.62194386e09,
                6.62254386e09,
                6.62314386e09,
                6.62374386e09,
                6.62434386e09,
                6.62494386e09,
                6.62554386e09,
                6.62614386e09,
                6.62674386e09,
                6.62734386e09,
                6.62794386e09,
                6.62854386e09,
                6.62914386e09,
                6.62974386e09,
                6.63034386e09,
                6.63094386e09,
                6.63154386e09,
                6.63214386e09,
                6.63274386e09,
                6.63334386e09,
                6.63394386e09,
                6.63454386e09,
                6.63514386e09,
                6.63574386e09,
                6.63634386e09,
                6.63694386e09,
                6.63754386e09,
                6.63814386e09,
                6.63874386e09,
                6.63934386e09,
                6.63994386e09,
                6.64054386e09,
                6.64114386e09,
                6.64174386e09,
                6.64234386e09,
                6.64294386e09,
                6.64354386e09,
                6.64414386e09,
                6.64474386e09,
                6.64534386e09,
                6.64594386e09,
                6.64654386e09,
                6.64714386e09,
                6.64774386e09,
                6.64834386e09,
                6.64894386e09,
                6.64954386e09,
                6.65014386e09,
                6.65074386e09,
                6.65134386e09,
                6.65194386e09,
                6.65254386e09,
                6.65314386e09,
                6.65374386e09,
                6.65434386e09,
                6.65494386e09,
                6.65554386e09,
                6.65614386e09,
                6.65674386e09,
                6.65734386e09,
                6.65794386e09,
                6.65854386e09,
                6.65914386e09,
                6.65974386e09,
                6.66034386e09,
                6.66094386e09,
                6.66154386e09,
                6.66214386e09,
                6.66274386e09,
                6.66334386e09,
                6.66394386e09,
                6.66454386e09,
                6.66514386e09,
                6.66574386e09,
                6.66634386e09,
                6.66694386e09,
                6.66754386e09,
                6.66814386e09,
                6.66874386e09,
                6.66934386e09,
                6.66994386e09,
                6.67054386e09,
                6.67114386e09,
                6.67174386e09,
                6.67234386e09,
                6.67294386e09,
                6.67354386e09,
                6.67414386e09,
                6.67474386e09,
                6.67534386e09,
                6.67594386e09,
                6.67654386e09,
                6.67714386e09,
                6.67774386e09,
                6.67834386e09,
                6.67894386e09,
                6.67954386e09,
                6.68014386e09,
                6.68074386e09,
                6.68134386e09,
                6.68194386e09,
                6.68254386e09,
                6.68314386e09,
                6.68374386e09,
                6.68434386e09,
                6.68494386e09,
                6.68554386e09,
                6.68614386e09,
                6.68674386e09,
                6.68734386e09,
                6.68794386e09,
                6.68854386e09,
                6.68914386e09,
                6.68974386e09,
                6.69034386e09,
                6.69094386e09,
                6.69154386e09,
                6.69214386e09,
                6.69274386e09,
                6.69334386e09,
                6.69394386e09,
                6.69454386e09,
                6.69514386e09,
                6.69574386e09,
                6.69634386e09,
                6.69694386e09,
                6.69754386e09,
                6.69814386e09,
                6.69874386e09,
            ]
        ),
    ]
    return RunExperimentResults(data=data), sweep_points


class TestQubitSpectroscopyAnalysisTwoQubit:
    def test_create_and_run(self, two_tunable_transmon_platform, results_two_qubit):
        qubits = two_tunable_transmon_platform.qpu.quantum_elements
        options = qubit_spectroscopy.analysis_workflow.options()
        result = qubit_spectroscopy.analysis_workflow(
            result=results_two_qubit[0],
            qubits=qubits,
            frequencies=results_two_qubit[1],
            options=options,
        ).run()

        assert len(result.tasks) == 5

        proc_data_dict = result.tasks["calculate_signal_magnitude_and_phase"].output
        np.testing.assert_array_almost_equal(
            proc_data_dict["q0"]["magnitude"],
            np.array(
                [
                    1.96115506,
                    1.97167168,
                    1.97574724,
                    1.97508348,
                    1.97027065,
                    1.9782153,
                    1.97901144,
                    1.98068189,
                    1.98272098,
                    1.97764058,
                    1.97731777,
                    1.98334076,
                    1.98316209,
                    1.9842831,
                    1.98353034,
                    1.98324422,
                    1.97663214,
                    1.97817882,
                    1.98195531,
                    1.97946963,
                    1.97737341,
                    1.97921709,
                    1.97869709,
                    1.97831869,
                    1.98143393,
                    1.98041165,
                    1.97766483,
                    1.9833734,
                    1.98579218,
                    1.97745856,
                    1.97783093,
                    1.97778806,
                    1.53335673,
                    1.63088846,
                    1.73985083,
                    1.81740783,
                    1.86778957,
                    1.91063428,
                    1.9414293,
                    1.95288792,
                    1.95651417,
                    1.97141211,
                    1.97442231,
                    1.97626437,
                    1.97624834,
                    1.97792029,
                    1.9829139,
                    1.976315,
                    1.97279769,
                    1.97396463,
                    1.97296576,
                    1.97856192,
                    1.97322007,
                    1.97906554,
                    1.97910662,
                    1.97868223,
                    1.97327943,
                    1.97568842,
                    1.97500094,
                    1.9759244,
                    1.9765965,
                    1.98099916,
                    1.98156601,
                    1.97859128,
                    1.98048876,
                    1.97729464,
                    1.97736198,
                    1.97365126,
                    1.97507859,
                    1.97953144,
                    1.98113901,
                    1.97962915,
                    1.98130595,
                    1.98099216,
                    1.98246194,
                    1.97651464,
                    1.97985085,
                    1.97527139,
                    1.9771229,
                    1.9832143,
                    1.98172825,
                    1.98003474,
                    1.98281759,
                    1.98134343,
                    1.98105307,
                    1.97911766,
                    1.97901714,
                    1.97795731,
                    1.98144341,
                    1.98690111,
                    1.97926907,
                    1.98404887,
                    1.98220711,
                    1.98176834,
                    1.97939118,
                    1.97597327,
                    1.97530496,
                    1.97374594,
                    1.97473532,
                    1.97392353,
                    1.97843611,
                    1.97299418,
                    1.97310134,
                    1.97699442,
                    1.97461831,
                    1.97435024,
                    1.9750972,
                    1.9680742,
                    1.96605148,
                    1.96905762,
                    1.97754094,
                    1.9817749,
                    1.975488,
                    1.9741389,
                    1.97368691,
                    1.97935858,
                    1.97723729,
                    1.9706961,
                    1.97285766,
                    1.97524586,
                    1.96988841,
                    1.96615903,
                    1.96562686,
                    1.97305376,
                    1.96709766,
                    1.96496425,
                    1.9608229,
                    1.95645364,
                    1.95658641,
                    1.95796649,
                    1.95341563,
                    1.95207782,
                    1.94961041,
                    1.95285579,
                    1.95005552,
                    1.95870723,
                    1.9476983,
                    1.94518902,
                    1.95246765,
                    1.94318091,
                    1.92933585,
                    1.93463406,
                    1.93553165,
                    1.9293092,
                    1.91646137,
                    1.91843395,
                    1.92416161,
                    1.92927675,
                    1.9259922,
                    1.93575144,
                    1.94348412,
                    1.94528936,
                    1.95035223,
                    1.94720806,
                    1.92301455,
                    1.88494644,
                    1.81504866,
                    1.76973602,
                    1.69720039,
                    1.69178306,
                    1.76183464,
                    1.59769412,
                    1.46432595,
                    1.51682355,
                    1.36014666,
                    1.05287849,
                    1.14209776,
                    1.18865815,
                    1.11163754,
                    1.27123034,
                    1.37744105,
                    1.39770971,
                    1.5091407,
                    1.49213495,
                    1.60056557,
                    1.69439646,
                    1.71654592,
                    1.70816567,
                    1.7333621,
                    1.77719735,
                    1.83030981,
                    1.8599123,
                    1.89905877,
                    1.91914962,
                    1.93468819,
                    1.94261031,
                    1.94737284,
                    1.95216059,
                    1.94493945,
                    1.94320228,
                    1.95041838,
                    1.94711904,
                    1.93437796,
                    1.9384283,
                    1.93764797,
                    1.94534969,
                    1.95142959,
                    1.9467735,
                    1.94830007,
                    1.94643087,
                    1.95364949,
                ]
            ),
        )
        np.testing.assert_array_almost_equal(
            proc_data_dict["q0"]["phase"],
            np.array(
                [
                    -1.87240169,
                    -1.87071263,
                    -1.87254674,
                    -1.87095699,
                    -1.87170864,
                    -1.87024979,
                    -1.87024189,
                    -1.87138496,
                    -1.86924193,
                    -1.87214608,
                    -1.87131209,
                    -1.87025163,
                    -1.87147944,
                    -1.87220592,
                    -1.87133847,
                    -1.86915023,
                    -1.87303157,
                    -1.87199331,
                    -1.86954578,
                    -1.87137733,
                    -1.87002851,
                    -1.87074321,
                    -1.87048286,
                    -1.87259509,
                    -1.87158064,
                    -1.87306943,
                    -1.87050973,
                    -1.8698137,
                    -1.87151804,
                    -1.87057544,
                    -1.87045897,
                    -1.87052188,
                    -1.86232262,
                    -1.88841766,
                    -1.88690509,
                    -1.88375145,
                    -1.88226804,
                    -1.87658641,
                    -1.87624917,
                    -1.87447099,
                    -1.87131233,
                    -1.871867,
                    -1.87171649,
                    -1.87233226,
                    -1.8719433,
                    -1.86887261,
                    -1.871329,
                    -1.87118759,
                    -1.86948261,
                    -1.8730018,
                    -1.8695508,
                    -1.86885063,
                    -1.86937648,
                    -1.86843046,
                    -1.87194791,
                    -1.86993178,
                    -1.86920634,
                    -1.87036278,
                    -1.87075885,
                    -1.87422902,
                    -1.87038052,
                    -1.86974779,
                    -1.87175833,
                    -1.87231102,
                    -1.87063717,
                    -1.87109764,
                    -1.87055781,
                    -1.86906437,
                    -1.87075284,
                    -1.87053007,
                    -1.86942021,
                    -1.87032457,
                    -1.87040578,
                    -1.87307204,
                    -1.87045441,
                    -1.87136936,
                    -1.87073539,
                    -1.87110658,
                    -1.87181408,
                    -1.87281858,
                    -1.87259698,
                    -1.87041733,
                    -1.87142395,
                    -1.87054091,
                    -1.87016602,
                    -1.87345452,
                    -1.86868082,
                    -1.87019681,
                    -1.87265063,
                    -1.87301725,
                    -1.87024884,
                    -1.86977885,
                    -1.87105443,
                    -1.87013799,
                    -1.87136718,
                    -1.87171955,
                    -1.87240107,
                    -1.8729938,
                    -1.87274733,
                    -1.87070959,
                    -1.87107588,
                    -1.87149618,
                    -1.87229228,
                    -1.87169701,
                    -1.87250649,
                    -1.87139023,
                    -1.87093622,
                    -1.87153561,
                    -1.87077434,
                    -1.87190594,
                    -1.87311644,
                    -1.87237463,
                    -1.86936995,
                    -1.87308617,
                    -1.871165,
                    -1.87135362,
                    -1.87197614,
                    -1.87002144,
                    -1.87170774,
                    -1.87202863,
                    -1.87059031,
                    -1.87254913,
                    -1.87217391,
                    -1.87125554,
                    -1.8697703,
                    -1.87272706,
                    -1.87261372,
                    -1.87319898,
                    -1.87543001,
                    -1.87337384,
                    -1.87148423,
                    -1.87340188,
                    -1.87294967,
                    -1.87192932,
                    -1.87293427,
                    -1.8729318,
                    -1.87160313,
                    -1.87376067,
                    -1.8720503,
                    -1.87697748,
                    -1.87470403,
                    -1.87429273,
                    -1.87634068,
                    -1.8758654,
                    -1.87594038,
                    -1.87800857,
                    -1.87925241,
                    -1.87509189,
                    -1.87686997,
                    -1.8755407,
                    -1.87645087,
                    -1.87425918,
                    -1.87416691,
                    -1.87378134,
                    -1.87541998,
                    -1.88013331,
                    -1.8895749,
                    -1.89500453,
                    -1.9015923,
                    -1.90589735,
                    -1.8932671,
                    -1.91513642,
                    -1.93835438,
                    -1.92799421,
                    -1.95682186,
                    -2.03873627,
                    -2.01007579,
                    -1.99342689,
                    -2.02401439,
                    -1.97576012,
                    -1.95350152,
                    -1.94995064,
                    -1.92915133,
                    -1.93033621,
                    -1.91487716,
                    -1.90191169,
                    -1.89951051,
                    -1.90139885,
                    -1.89719956,
                    -1.89221088,
                    -1.88736881,
                    -1.8832505,
                    -1.88170068,
                    -1.87724781,
                    -1.87552731,
                    -1.87383327,
                    -1.87444593,
                    -1.87297662,
                    -1.87445464,
                    -1.87395092,
                    -1.87417532,
                    -1.87429782,
                    -1.87445101,
                    -1.87556103,
                    -1.8753648,
                    -1.87601149,
                    -1.87594163,
                    -1.87255578,
                    -1.87459496,
                    -1.87419721,
                    -1.87410904,
                ]
            ),
        )

        fit_values = result.tasks["fit_data"].output["q0"].best_values
        np.testing.assert_allclose(fit_values["width"], 3200588.271896812, rtol=1e-4)
        np.testing.assert_allclose(fit_values["position"], 6204602795.372227, rtol=1e-4)
        np.testing.assert_allclose(
            fit_values["amplitude"], -2744249.570512245, rtol=1e-4
        )
        np.testing.assert_allclose(fit_values["offset"], 1.9721753382823548, rtol=1e-4)

        qubit_parameters = result.tasks["extract_qubit_parameters"].output
        np.testing.assert_almost_equal(
            qubit_parameters["old_parameter_values"]["q0"]["resonance_frequency_ge"],
            6.5e9,
        )
        np.testing.assert_allclose(
            qubit_parameters["new_parameter_values"]["q0"][
                "resonance_frequency_ge"
            ].nominal_value,
            6204602795.372227,
            rtol=1e-4,
        )
        np.testing.assert_allclose(
            qubit_parameters["new_parameter_values"]["q0"][
                "resonance_frequency_ge"
            ].std_dev,
            95868.157179296,
            rtol=1e-4,
        )

        # Test q1
        proc_data_dict = result.tasks["calculate_signal_magnitude_and_phase"].output
        np.testing.assert_array_almost_equal(
            proc_data_dict["q1"]["magnitude"],
            np.array(
                [
                    0.17460054,
                    0.17199644,
                    0.17632402,
                    0.17447393,
                    0.17394078,
                    0.17060436,
                    0.17745926,
                    0.17501199,
                    0.17525534,
                    0.17668651,
                    0.17438116,
                    0.17394122,
                    0.17440043,
                    0.17605201,
                    0.17732504,
                    0.17852295,
                    0.1729408,
                    0.17380817,
                    0.17268575,
                    0.17581629,
                    0.173671,
                    0.17387454,
                    0.17638886,
                    0.17650209,
                    0.17324433,
                    0.17468494,
                    0.17147477,
                    0.17943553,
                    0.17441461,
                    0.17373724,
                    0.17526185,
                    0.16589364,
                    0.17970279,
                    0.17102357,
                    0.17104497,
                    0.17596469,
                    0.17448035,
                    0.17473357,
                    0.1730928,
                    0.17802873,
                    0.17271236,
                    0.17359909,
                    0.17059998,
                    0.17576501,
                    0.17218602,
                    0.17186568,
                    0.18006505,
                    0.1748147,
                    0.1764339,
                    0.17142489,
                    0.1700714,
                    0.17241493,
                    0.17093357,
                    0.17222166,
                    0.17553264,
                    0.17229517,
                    0.17794659,
                    0.17790066,
                    0.16871868,
                    0.17331789,
                    0.17397376,
                    0.17402735,
                    0.17550329,
                    0.17552035,
                    0.17330646,
                    0.17530847,
                    0.17875306,
                    0.17203576,
                    0.17573023,
                    0.17359812,
                    0.17767077,
                    0.17360214,
                    0.17528694,
                    0.17576434,
                    0.17414873,
                    0.17637998,
                    0.17015501,
                    0.17193945,
                    0.1733458,
                    0.17722001,
                    0.17569786,
                    0.17016518,
                    0.17146286,
                    0.17247312,
                    0.16866277,
                    0.17541007,
                    0.17816551,
                    0.17416575,
                    0.17863417,
                    0.17553684,
                    0.17203423,
                    0.17379494,
                    0.1742867,
                    0.17259214,
                    0.17558615,
                    0.17519086,
                    0.17784091,
                    0.17355005,
                    0.17548528,
                    0.17359798,
                    0.17618677,
                    0.17768245,
                    0.17707282,
                    0.17355298,
                    0.17038697,
                    0.17809317,
                    0.17683635,
                    0.17467179,
                    0.17148691,
                    0.17885435,
                    0.17207092,
                    0.17334276,
                    0.17490387,
                    0.17320083,
                    0.17284855,
                    0.17449817,
                    0.17507448,
                    0.17624624,
                    0.17476426,
                    0.17227424,
                    0.17172582,
                    0.16962013,
                    0.17260832,
                    0.173792,
                    0.17382369,
                    0.17349054,
                    0.17438472,
                    0.17985151,
                    0.17587589,
                    0.17556952,
                    0.17543892,
                    0.16867171,
                    0.17504733,
                    0.17266538,
                    0.17268051,
                    0.17167931,
                    0.17443267,
                    0.16792979,
                    0.17351962,
                    0.17270586,
                    0.17570906,
                    0.17976596,
                    0.1749391,
                    0.17784379,
                    0.17313958,
                    0.17470202,
                    0.17966998,
                    0.18055007,
                    0.17816731,
                    0.18200264,
                    0.18365214,
                    0.18058515,
                    0.1829324,
                    0.17495216,
                    0.18002762,
                    0.17505617,
                    0.17805973,
                    0.20088234,
                    0.25068033,
                    0.26602606,
                    0.24590417,
                    0.42321422,
                    0.45393433,
                    0.72335109,
                    0.68891679,
                    0.64327995,
                    0.55198789,
                    0.46179827,
                    0.36328702,
                    0.36482924,
                    0.2978929,
                    0.2675289,
                    0.25594705,
                    0.23758525,
                    0.22145038,
                    0.18928611,
                    0.18436481,
                    0.18572853,
                    0.17854442,
                    0.17682582,
                    0.17750953,
                    0.18042366,
                    0.17760617,
                    0.17836477,
                    0.17930059,
                    0.18038442,
                    0.17666886,
                    0.17695884,
                    0.1787016,
                    0.1759273,
                    0.17717806,
                    0.17820263,
                    0.1797366,
                    0.17910819,
                    0.17460386,
                    0.17280174,
                    0.1777346,
                    0.1762016,
                    0.17759851,
                    0.1722993,
                    0.17755506,
                ]
            ),
        )
        np.testing.assert_array_almost_equal(
            proc_data_dict["q1"]["phase"],
            np.array(
                [
                    -0.56384872,
                    -0.50834713,
                    -0.53197387,
                    -0.50071976,
                    -0.49883066,
                    -0.52962447,
                    -0.4859734,
                    -0.48904546,
                    -0.52299158,
                    -0.51877941,
                    -0.50882784,
                    -0.5074472,
                    -0.50952209,
                    -0.52957297,
                    -0.48347922,
                    -0.53370703,
                    -0.51870052,
                    -0.4820673,
                    -0.50361026,
                    -0.50552674,
                    -0.49434736,
                    -0.48764836,
                    -0.48653828,
                    -0.51029741,
                    -0.51490333,
                    -0.51222575,
                    -0.51268442,
                    -0.5305633,
                    -0.47565487,
                    -0.4853534,
                    -0.50525456,
                    -0.51478142,
                    -0.50445197,
                    -0.52754274,
                    -0.49664013,
                    -0.49678761,
                    -0.5160378,
                    -0.50342712,
                    -0.50260558,
                    -0.52475565,
                    -0.51238776,
                    -0.53347486,
                    -0.54645883,
                    -0.53452791,
                    -0.52742109,
                    -0.47931898,
                    -0.510183,
                    -0.48415614,
                    -0.48138473,
                    -0.51595836,
                    -0.52644422,
                    -0.48888546,
                    -0.48876308,
                    -0.49167236,
                    -0.5223672,
                    -0.50662624,
                    -0.48410179,
                    -0.50363984,
                    -0.47161793,
                    -0.49966359,
                    -0.52742606,
                    -0.51298171,
                    -0.47860374,
                    -0.51994252,
                    -0.48270142,
                    -0.50514504,
                    -0.50993789,
                    -0.49363574,
                    -0.49504022,
                    -0.48629737,
                    -0.49063789,
                    -0.48529118,
                    -0.47227202,
                    -0.53884044,
                    -0.51391909,
                    -0.49415214,
                    -0.49929419,
                    -0.49770388,
                    -0.51866163,
                    -0.49008036,
                    -0.5084432,
                    -0.49646066,
                    -0.50330421,
                    -0.51810049,
                    -0.49342757,
                    -0.50902529,
                    -0.54198874,
                    -0.49758053,
                    -0.49236759,
                    -0.49739724,
                    -0.49709106,
                    -0.50287004,
                    -0.48389143,
                    -0.47473392,
                    -0.51101658,
                    -0.4869224,
                    -0.50785735,
                    -0.50604824,
                    -0.50744098,
                    -0.50833302,
                    -0.4777035,
                    -0.51199338,
                    -0.49457798,
                    -0.51637123,
                    -0.51321418,
                    -0.53344875,
                    -0.51233593,
                    -0.5113725,
                    -0.52349409,
                    -0.49929214,
                    -0.49921202,
                    -0.48653772,
                    -0.52145755,
                    -0.52595195,
                    -0.49725017,
                    -0.51901237,
                    -0.53817257,
                    -0.51432166,
                    -0.55697467,
                    -0.53977808,
                    -0.54568364,
                    -0.55191305,
                    -0.53462567,
                    -0.50102589,
                    -0.53764789,
                    -0.55896537,
                    -0.58149522,
                    -0.53688432,
                    -0.50510643,
                    -0.53721305,
                    -0.56296603,
                    -0.51171807,
                    -0.53725588,
                    -0.55578176,
                    -0.56846606,
                    -0.57850173,
                    -0.54155292,
                    -0.61711616,
                    -0.62239107,
                    -0.61429845,
                    -0.63849753,
                    -0.64692192,
                    -0.64404418,
                    -0.66883969,
                    -0.69748105,
                    -0.69795613,
                    -0.73949639,
                    -0.79194612,
                    -0.76680665,
                    -0.79967939,
                    -0.77434739,
                    -0.77339471,
                    -0.73719047,
                    -0.68933283,
                    -0.67712101,
                    -0.7192854,
                    -0.82541057,
                    -1.07583328,
                    -1.30463891,
                    -1.36630979,
                    -1.31654017,
                    -1.6576171,
                    -1.66994937,
                    -1.82418598,
                    -1.82026351,
                    -1.79345589,
                    -1.76112995,
                    -1.68323969,
                    -1.56367109,
                    -1.56545997,
                    -1.45072311,
                    -1.35473647,
                    -1.29430055,
                    -1.25625788,
                    -1.10601996,
                    -0.93794204,
                    -0.84946446,
                    -0.76107626,
                    -0.6993257,
                    -0.69554593,
                    -0.72255089,
                    -0.74450871,
                    -0.77338349,
                    -0.71136356,
                    -0.75955025,
                    -0.73456517,
                    -0.70891309,
                    -0.70315206,
                    -0.71786035,
                    -0.67667092,
                    -0.67502795,
                    -0.67233168,
                    -0.66665459,
                    -0.60012071,
                    -0.6203556,
                    -0.57113357,
                    -0.60583348,
                    -0.57638052,
                    -0.57345373,
                    -0.60784395,
                    -0.5591461,
                ]
            ),
        )

        fit_values = result.tasks["fit_data"].output["q1"].best_values
        np.testing.assert_allclose(fit_values["width"], 1597904.125510718, rtol=1e-4)
        np.testing.assert_allclose(fit_values["position"], 6677292267.142125, rtol=1e-4)
        np.testing.assert_allclose(
            fit_values["amplitude"], 879309.5114206473, rtol=1e-4
        )
        np.testing.assert_allclose(fit_values["offset"], 0.17168073126300112, rtol=1e-4)

        qubit_parameters = result.tasks["extract_qubit_parameters"].output
        np.testing.assert_almost_equal(
            qubit_parameters["old_parameter_values"]["q1"]["resonance_frequency_ge"],
            6.51e9,
        )
        np.testing.assert_allclose(
            qubit_parameters["new_parameter_values"]["q1"][
                "resonance_frequency_ge"
            ].nominal_value,
            6677292267.142125,
            rtol=1e-4,
        )
        np.testing.assert_allclose(
            qubit_parameters["new_parameter_values"]["q1"][
                "resonance_frequency_ge"
            ].std_dev,
            27996.19904992496,
            rtol=1e-4,
        )

    def test_create_and_run_frequency_filter_one_qubit(
        self, two_tunable_transmon_platform, results_two_qubit
    ):
        qubits = two_tunable_transmon_platform.qpu.quantum_elements
        options = qubit_spectroscopy.analysis_workflow.options()
        options.frequency_filters({qubits[0].uid: (None, 6.16e9)})

        result = qubit_spectroscopy.analysis_workflow(
            result=results_two_qubit[0],
            qubits=qubits,
            frequencies=results_two_qubit[1],
            options=options,
        ).run()

        fit_res = result.tasks["fit_data"].output["q0"]
        np.testing.assert_allclose(
            fit_res.best_values["position"], 6123903111.013932, rtol=1e-4
        )
        assert len(fit_res.userkws["x"]) == 92
        fit_res = result.tasks["fit_data"].output["q1"]
        np.testing.assert_allclose(
            fit_res.best_values["position"], 6677292271.346118, rtol=1e-4
        )
        assert len(fit_res.userkws["x"]) == 201

        # other qubit has None as values
        options.frequency_filters({qubits[0].uid: (None, 6.16e9), qubits[1].uid: None})
        result = qubit_spectroscopy.analysis_workflow(
            result=results_two_qubit[0],
            qubits=qubits,
            frequencies=results_two_qubit[1],
            options=options,
        ).run()

        fit_res = result.tasks["fit_data"].output["q0"]
        np.testing.assert_allclose(
            fit_res.best_values["position"], 6123903111.013932, rtol=1e-4
        )
        assert len(fit_res.userkws["x"]) == 92
        fit_res = result.tasks["fit_data"].output["q1"]
        np.testing.assert_allclose(
            fit_res.best_values["position"], 6677292271.346118, rtol=1e-4
        )
        assert len(fit_res.userkws["x"]) == 201

    def test_create_and_run_frequency_filter_both_qubits(
        self, two_tunable_transmon_platform, results_two_qubit
    ):
        qubits = two_tunable_transmon_platform.qpu.quantum_elements
        options = qubit_spectroscopy.analysis_workflow.options()
        options.frequency_filters(
            {qubits[0].uid: (None, 6.16e9), qubits[1].uid: (None, 6.64e9)}
        )

        result = qubit_spectroscopy.analysis_workflow(
            result=results_two_qubit[0],
            qubits=qubits,
            frequencies=results_two_qubit[1],
            options=options,
        ).run()

        fit_res = result.tasks["fit_data"].output["q0"]
        np.testing.assert_allclose(
            fit_res.best_values["position"], 6123903111.013932, rtol=1e-4
        )
        assert len(fit_res.userkws["x"]) == 92

        fit_res = result.tasks["fit_data"].output["q1"]
        np.testing.assert_allclose(
            fit_res.best_values["position"], 6606385019.079187, rtol=1e-4
        )
        assert len(fit_res.userkws["x"]) == 102

    def test_create_and_run_no_fitting(
        self, two_tunable_transmon_platform, results_two_qubit
    ):
        qubits = two_tunable_transmon_platform.qpu.quantum_elements
        options = qubit_spectroscopy.analysis_workflow.options()
        options.do_fitting(False)

        result = qubit_spectroscopy.analysis_workflow(
            result=results_two_qubit[0],
            qubits=qubits,
            frequencies=results_two_qubit[1],
            options=options,
        ).run()

        assert len(result.tasks) == 5

        task_names = [t.name for t in result.tasks]
        assert len(result.tasks["fit_data"].output) == 0
        qb_pars = result.tasks["extract_qubit_parameters"].output
        assert qb_pars["old_parameter_values"]["q0"]["resonance_frequency_ge"] == 6.5e9
        assert len(qb_pars["new_parameter_values"]["q0"]) == 0
        assert qb_pars["old_parameter_values"]["q1"]["resonance_frequency_ge"] == 6.51e9
        assert len(qb_pars["new_parameter_values"]["q1"]) == 0
        assert "plot_raw_complex_data_1d" in task_names
        assert "plot_qubit_spectroscopy" in task_names

    def test_create_and_run_no_plotting(
        self, two_tunable_transmon_platform, results_two_qubit
    ):
        qubits = two_tunable_transmon_platform.qpu.quantum_elements
        options = qubit_spectroscopy.analysis_workflow.options()
        options.do_plotting(False)

        result = qubit_spectroscopy.analysis_workflow(
            result=results_two_qubit[0],
            qubits=qubits,
            frequencies=results_two_qubit[1],
            options=options,
        ).run()

        assert len(result.tasks) == 3

        task_names = [t.name for t in result.tasks]
        assert "plot_raw_complex_data_1d" not in task_names
        assert "plot_qubit_spectroscopy" not in task_names
        assert "fit_data" in task_names
        assert "extract_qubit_parameters" in task_names

    def test_create_and_run_close_figures(
        self, two_tunable_transmon_platform, results_two_qubit
    ):
        qubits = two_tunable_transmon_platform.qpu.quantum_elements
        options = qubit_spectroscopy.analysis_workflow.options()

        options.close_figures(True)
        result = qubit_spectroscopy.analysis_workflow(
            result=results_two_qubit[0],
            qubits=qubits,
            frequencies=results_two_qubit[1],
            options=options,
        ).run()

        assert isinstance(
            result.tasks["plot_qubit_spectroscopy"].output["q0"], mpl.figure.Figure
        )
        assert isinstance(
            result.tasks["plot_qubit_spectroscopy"].output["q1"], mpl.figure.Figure
        )

        options.close_figures(True)
        result = qubit_spectroscopy.analysis_workflow(
            result=results_two_qubit[0],
            qubits=qubits,
            frequencies=results_two_qubit[1],
            options=options,
        ).run()

        assert isinstance(
            result.tasks["plot_qubit_spectroscopy"].output["q0"], mpl.figure.Figure
        )
        assert isinstance(
            result.tasks["plot_qubit_spectroscopy"].output["q1"], mpl.figure.Figure
        )
        plt.close(result.tasks["plot_qubit_spectroscopy"].output["q0"])
        plt.close(result.tasks["plot_qubit_spectroscopy"].output["q1"])
